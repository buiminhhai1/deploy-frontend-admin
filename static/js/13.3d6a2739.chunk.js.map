{"version":3,"sources":["containers/auth/Facebook/Facebook.js","containers/auth/Facebook/Facebook.module.css","containers/auth/Google/Google.js","containers/auth/Google/Google.module.css","containers/auth/Register/Register.js"],"names":["Facebook","props","responseFacebook","response","fbData","idFacebook","id","name","email","picture","data","url","accessToken","onSingInFacebook","state","userID","fbContent","this","isLoggedIn","isDisabled","disabled","textButton","size","appId","autoLoad","fields","scope","callback","className","classes","Component","connect","dispatch","actions","module","exports","Google","responseGoogle","onSingInGoogle","idGoole","googleId","profileObj","imageUrl","componentClicked","console","log","ggContent","clientId","buttonText","onSuccess","onFailure","cookiePolicy","ggData","Register","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","setState","onRegister","password","fullname","handleConfirmBlur","value","target","confirmDirty","compareToFirstPassword","rule","getFieldValue","validateToNextPassword","onRefresh","validateFields","force","getFieldDecorator","myForm","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","type","message","required","onChange","title","whitespace","hasFeedback","validator","Password","onBlur","offset","htmlType","loading","errorMessage","error","loginRedirect","emailRegister","to","loginRedirectPath","auth","errorRegister","messageRegister","Form","create"],"mappings":"qPAMMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,iBAAmB,SAAAC,GACjB,IAAMC,EAAS,CACbC,WAAYF,EAASG,GACrBC,KAAMJ,EAASI,KACfC,MAAOL,EAASK,MAChBC,QAASN,EAASM,QAAQC,KAAKC,IAC/BC,YAAaT,EAASS,aAExB,EAAKX,MAAMY,iBAAiBT,IAhB5B,EAAKU,MAAQ,CACXC,OAAQ,GACRR,KAAM,GACNC,MAAO,GACPC,QAAS,IANM,E,sEAsBjB,IAAIO,EAiBJ,OAfEA,EADEC,KAAKH,MAAMI,WACD,KAGV,kBAAC,IAAD,CACEC,WAAYF,KAAKhB,MAAMmB,SACvBC,WAAW,yBACXC,KAAK,QACLC,MAAM,mBACNC,UAAU,EACVC,OAAO,qBACPC,MAAM,iBACNC,SAAUV,KAAKf,mBAId,yBAAK0B,UAAWC,IAAQ7B,UAAWgB,O,GAxCvBc,aAgDRC,gBAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCnB,iBAAkB,SAAAT,GAAM,OAAI4B,EAASC,IAAoB7B,QAG5C2B,CAAkC/B,I,oBCrDjDkC,EAAOC,QAAU,CAAC,SAAW,6B,wICMvBC,E,YACJ,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KASRoC,eAAiB,SAAAlC,GACf,EAAKF,MAAMqC,eAAe,CACxBC,QAASpC,EAASqC,SAClBjC,KAAMJ,EAASsC,WAAWlC,KAC1BC,MAAOL,EAASsC,WAAWjC,MAC3BC,QAASN,EAASsC,WAAWC,SAC7B9B,YAAaT,EAASS,eAhBP,EAoBnB+B,iBAAmB,kBAAMC,QAAQC,IAAI,YAlBnC,EAAK/B,MAAQ,CACXC,OAAQ,GACRR,KAAM,GACNC,MAAO,GACPC,QAAS,IANM,E,sEAuBjB,IAAIqC,EAeJ,OAbEA,EADE7B,KAAKH,MAAMI,WACD,KAGV,kBAAC,cAAD,CACEE,SAAUH,KAAKhB,MAAMmB,SACrB2B,SAAS,2EACTC,WAAW,uBACXC,UAAWhC,KAAKoB,eAChBa,UAAWjC,KAAKoB,eAChBc,aAAc,uBAIb,yBAAKvB,UAAWC,IAAQO,QAASU,O,GAvCvBhB,aA+CNC,gBAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCM,eAAgB,SAAAc,GAAM,OAAIpB,EAASC,IAAoBmB,QAG1CrB,CAAkCK,I,oBCrDjDF,EAAOC,QAAU,CAAC,OAAS,yB,yOCUrBkB,G,mBACJ,WAAYpD,GAAQ,IAAD,8BACjB,4CAAMA,KAORqD,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKvD,MAAMwD,KAAKC,yBAAwB,SAACC,EAAKC,GACvCD,IACH,EAAKE,SAAS,CAAErD,MAAOoD,EAAOpD,QAC9B,EAAKP,MAAM6D,WAAWF,EAAOpD,MAAOoD,EAAOG,SAAUH,EAAOI,eAb/C,EAkBnBC,kBAAoB,SAAAV,GAAM,IAChBW,EAAUX,EAAEY,OAAZD,MACR,EAAKL,SAAS,CACZO,aAAc,EAAKtD,MAAMsD,gBAAkBF,KArB5B,EAyBnBG,uBAAyB,SAACC,EAAMJ,EAAOvC,GAAc,IAC3C8B,EAAS,EAAKxD,MAAdwD,KACJS,GAASA,IAAUT,EAAKc,cAAc,YACxC5C,EAAS,iDAETA,KA9Be,EAkCnB6C,uBAAyB,SAACF,EAAMJ,EAAOvC,GACrC,EAAK1B,MAAMwE,YADuC,IAE1ChB,EAAS,EAAKxD,MAAdwD,KACJS,GAAS,EAAKpD,MAAMsD,cACtBX,EAAKiB,eAAe,CAAC,WAAY,CAC/BC,OAAO,IAGXhD,KAxCA,EAAKb,MAAQ,CACXsD,cAAc,EACd5D,MAAO,MAJQ,E,sEA6CT,IACAoE,EAAsB3D,KAAKhB,MAAMwD,KAAjCmB,kBAgCJC,EACF,kBAAC,IAAD,iBAhCqB,CACrBC,SAAU,CACRC,GAAI,CACFC,KAAM,GAERC,GAAI,CACFD,KAAM,IAGVE,WAAY,CACVH,GAAI,CACFC,KAAM,GAERC,GAAI,CACFD,KAAM,KAkBV,CAEEG,SAAUlE,KAAKqC,aACf1B,UAAU,aAEV,kBAAC,IAAKwD,KAAN,CAAWC,MAAM,UACdT,EAAkB,QAAS,CAC1BU,MAAO,CACL,CACEC,KAAM,QACNC,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,+BARdZ,CAWE,kBAAC,IAAD,CAAOc,SAAUzE,KAAKhB,MAAMwE,cAEjC,kBAAC,IAAKW,KAAN,CACEC,MACE,0CAEE,kBAAC,IAAD,CAASM,MAAM,wCACb,kBAAC,IAAD,CAAMJ,KAAK,yBAKhBX,EAAkB,WAAY,CAC7BU,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,8BACTI,YAAY,KALjBhB,CAQE,kBAAC,IAAD,QAEL,kBAAC,IAAKQ,KAAN,CAAWC,MAAM,WAAWQ,aAAW,GACpCjB,EAAkB,WAAY,CAC7BU,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,+BAEX,CACEM,UAAW7E,KAAKuD,0BAPrBI,CAUE,kBAAC,IAAMmB,SAAP,QAEL,kBAAC,IAAKX,KAAN,CAAWC,MAAM,mBAAmBQ,aAAW,GAC5CjB,EAAkB,UAAW,CAC5BU,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,iCAEX,CACEM,UAAW7E,KAAKoD,0BAPrBO,CAUE,kBAAC,IAAMmB,SAAP,CAAgBC,OAAQ/E,KAAKgD,sBAElC,kBAAC,IAAKmB,KA/EiB,CACzBF,WAAY,CACVH,GAAI,CACFC,KAAM,GACNiB,OAAQ,GAEVhB,GAAI,CACFD,KAAM,GACNiB,OAAQ,KAwER,kBAAC,IAAD,CAAQV,KAAK,UAAUW,SAAS,UAAhC,cAOFjF,KAAKhB,MAAMkG,UACbtB,EAAS,kBAAC,IAAD,CAAMvD,KAAK,WAEtB,IAAI8E,EAAe,KACfnF,KAAKhB,MAAMoG,QACbD,EAAeZ,IAAQa,MAAMpF,KAAKhB,MAAMuF,UAG1C,IAAIc,EAAgB,KAOpB,OALErF,KAAKhB,MAAMsG,eACXtF,KAAKH,MAAMN,QAAUS,KAAKhB,MAAMsG,gBAEhCD,EAAgB,kBAAC,IAAD,CAAUE,GAAIvF,KAAKhB,MAAMwG,qBAGzC,yBAAK7E,UAAU,YACb,sDACC0E,EACAF,EACAvB,EAJH,eAME,kBAAC,IAAD,MANF,KAQE,kBAAC,IAAD,W,GAjLe/C,cAqMRC,uBAdS,SAAAjB,GAAK,MAAK,CAChCqF,QAASrF,EAAM4F,KAAKP,QACpBE,MAAOvF,EAAM4F,KAAKC,cAClBnB,QAAS1E,EAAM4F,KAAKE,gBACpBL,cAAezF,EAAM4F,KAAKH,cAC1BE,kBAAmB3F,EAAM4F,KAAKD,sBAGL,SAAAzE,GAAQ,MAAK,CACtC8B,WAAY,SAACtD,EAAOuD,EAAUxD,GAAlB,OACVyB,EAASC,IAAiBzB,EAAOuD,EAAUxD,KAC7CkE,UAAW,kBAAMzC,EAASC,WAGbF,CAIb8E,IAAKC,OAAO,CACVvG,KAAM,YADRsG,CAEGxD","file":"static/js/13.3d6a2739.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport classes from './Facebook.module.css';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nclass Facebook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userID: '',\r\n      name: '',\r\n      email: '',\r\n      picture: ''\r\n    };\r\n  }\r\n\r\n  responseFacebook = response => {\r\n    const fbData = {\r\n      idFacebook: response.id,\r\n      name: response.name,\r\n      email: response.email,\r\n      picture: response.picture.data.url,\r\n      accessToken: response.accessToken\r\n    };\r\n    this.props.onSingInFacebook(fbData);\r\n  };\r\n\r\n  render() {\r\n    let fbContent;\r\n    if (this.state.isLoggedIn) {\r\n      fbContent = null;\r\n    } else {\r\n      fbContent = (\r\n        <FacebookLogin\r\n          isDisabled={this.props.disabled}\r\n          textButton=\"Continue with Facebook\"\r\n          size=\"small\"\r\n          appId=\"2483517738600678\"\r\n          autoLoad={false}\r\n          fields=\"name,email,picture\"\r\n          scope=\"public_profile\"\r\n          callback={this.responseFacebook}\r\n        />\r\n      );\r\n    }\r\n    return <div className={classes.Facebook}>{fbContent}</div>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSingInFacebook: fbData => dispatch(actions.signInOauth(fbData))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Facebook);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Facebook\":\"Facebook_Facebook__LaXsS\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\nimport * as actions from '../../../store/actions/index';\r\nimport classes from './Google.module.css';\r\n\r\nclass Google extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userID: '',\r\n      name: '',\r\n      email: '',\r\n      picture: ''\r\n    };\r\n  }\r\n\r\n  responseGoogle = response => {\r\n    this.props.onSingInGoogle({\r\n      idGoole: response.googleId,\r\n      name: response.profileObj.name,\r\n      email: response.profileObj.email,\r\n      picture: response.profileObj.imageUrl,\r\n      accessToken: response.accessToken\r\n    });\r\n  };\r\n\r\n  componentClicked = () => console.log('clicked');\r\n\r\n  render() {\r\n    let ggContent;\r\n    if (this.state.isLoggedIn) {\r\n      ggContent = null;\r\n    } else {\r\n      ggContent = (\r\n        <GoogleLogin\r\n          disabled={this.props.disabled}\r\n          clientId=\"520556548555-saaoeeulltifvrmilmhag3ds6u19rjt9.apps.googleusercontent.com\"\r\n          buttonText=\"Continue with Google\"\r\n          onSuccess={this.responseGoogle}\r\n          onFailure={this.responseGoogle}\r\n          cookiePolicy={'single_host_origin'}\r\n        />\r\n      );\r\n    }\r\n    return <div className={classes.Google}>{ggContent}</div>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSingInGoogle: ggData => dispatch(actions.signInOauth(ggData))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Google);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Google\":\"Google_Google__1d2M3\"};","import React, { Component } from 'react';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, Button, Tooltip, Icon, message, Spin } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport Facebook from '../Facebook/Facebook';\r\nimport Google from '../Google/Google';\r\nimport './Register.css';\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      confirmDirty: false,\r\n      email: null\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        this.setState({ email: values.email });\r\n        this.props.onRegister(values.email, values.password, values.fullname);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({\r\n      confirmDirty: this.state.confirmDirty || !!value\r\n    });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    this.props.onRefresh();\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], {\r\n        force: true\r\n      });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: {\r\n          span: 9\r\n        },\r\n        sm: {\r\n          span: 9\r\n        }\r\n      },\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 6\r\n        },\r\n        sm: {\r\n          span: 6\r\n        }\r\n      }\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 12,\r\n          offset: 0\r\n        },\r\n        sm: {\r\n          span: 12,\r\n          offset: 8\r\n        }\r\n      }\r\n    };\r\n\r\n    let myForm = (\r\n      <Form\r\n        {...formItemLayout}\r\n        onSubmit={this.handleSubmit}\r\n        className=\"Register\"\r\n      >\r\n        <Form.Item label=\"E-mail\">\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!'\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Please input your E-mail!'\r\n              }\r\n            ]\r\n          })(<Input onChange={this.props.onRefresh} />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={\r\n            <span>\r\n              Full name\r\n              <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n          }\r\n        >\r\n          {getFieldDecorator('fullname', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your Fullname!',\r\n                whitespace: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!'\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword\r\n              }\r\n            ]\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!'\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword\r\n              }\r\n            ]\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      myForm = <Spin size=\"large\" />;\r\n    }\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = message.error(this.props.message);\r\n    }\r\n\r\n    let loginRedirect = null;\r\n    if (\r\n      this.props.emailRegister &&\r\n      this.state.email === this.props.emailRegister\r\n    ) {\r\n      loginRedirect = <Redirect to={this.props.loginRedirectPath} />;\r\n    }\r\n    return (\r\n      <div className=\"Register\">\r\n        <h2>Register to with admin</h2>\r\n        {loginRedirect}\r\n        {errorMessage}\r\n        {myForm}\r\n        Connect with\r\n        <Facebook />\r\n        Or\r\n        <Google />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.errorRegister,\r\n  message: state.auth.messageRegister,\r\n  emailRegister: state.auth.emailRegister,\r\n  loginRedirectPath: state.auth.loginRedirectPath\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRegister: (email, password, name) =>\r\n    dispatch(actions.register(email, password, name)),\r\n  onRefresh: () => dispatch(actions.refreshRegister())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  Form.create({\r\n    name: 'register'\r\n  })(Register)\r\n);\r\n"],"sourceRoot":""}